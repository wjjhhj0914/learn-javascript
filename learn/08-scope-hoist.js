// -----------------------------------------------------
// 스코프(Scope)
// - 코드 영역(범위)
// - 전역(전체 영역: global scope)
// - 지역(일부 영역: local scope)
//
// 호이스트(Hoist)
// - 무엇을 끌어올리나?
// - [ 함수 선언 ]을 [ 코드 작성 영역의 가장 상단 ]으로 끌어올린다.
// -----------------------------------------------------

// 호이스트(Function Hoist)
// 선언된 함수는 코드를 작성하는 영역의 가장 상위로 끌어올려진 것처럼 작동된다.
// 사람들이 현상(벌어진 일)만 보고 그 느낌을 표현한 말에 불과함.

// 함수 선언(Function Declaration)
// 컴퓨터 메모리에 함수가 기억된다.
// function 함수() {
//   console.log('함수가 실행되었어요!');
// }

// 함수 실행
// 컴퓨터 메모리에 기억된 함수 이름을 통해 코드를 실행한다.
// 함수();

// ------------------------------------------------------------------
// var 변수 선언 호이스트 현상
// ------------------------------------------------------------------
// var 변수 선언
// console.log(myName);
// var myName = '효정';

// 마치 호이스트(끌어올려진 것)처럼 보여요.
// 예측한 결과

// var 변수 선언은 마치 끌어올려진 것처럼 보이는데,
// 선언부만 끌어올려진 것처럼 작동한다.

// var myName;
// console.log(myName); // undefined
// var myName = '효정';

// ------------------------------------------------------------------
// let 변수, const 상수 선언 호이스트 현상이 일어날까? 아니오!
// ------------------------------------------------------------------
console.log(1, myName); // ReferenceError

// let 변수 선언
// let myName = '효정';

// const 상수 선언
const myName = '효정';

console.log(2, myName);

// ------------------------------------------------------------------
// 함수를 만드는 2가지 방법 비교
// ------------------------------------------------------------------
// 1. 함수 선언 (Function 키워드로 시작, 호이스트 현상) ✅
// 2. 함수 표현식 (변수에 함수 값을 할당, JS는 함수를 값으로 취급 / 호이스트 현상 ❌)
// ------------------------------------------------------------------

function look(who) {
  console.log(who + '를 보다.');
}

// 함수 (표현)식
// JavaScript는 함수를 값(value)으로 취급함.
// 변수 = 값 (할당할 수 있음)
// 변수 = 함수
// let 보다 = 'see'; // string(문자값)
let 보다 = function () {};

look('공무원');
look('형사');
look('선생님');
